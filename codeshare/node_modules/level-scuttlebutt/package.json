{
  "name": "level-scuttlebutt",
  "version": "5.0.6",
  "homepage": "https://github.com/dominictarr/level-scuttlebutt",
  "repository": {
    "type": "git",
    "url": "git://github.com/dominictarr/level-scuttlebutt.git"
  },
  "dependencies": {
    "monotonic-timestamp": "~0.0.7",
    "node-uuid": "~1.4.0",
    "duplex": "~1.0.0",
    "redis-protocol-stream": "~0.1.2",
    "parse-regexp": "~0.0.1",
    "mux-demux": "~3.5.0",
    "through": "~2.1.0",
    "level-live-stream": "~1.4",
    "map-reduce": "~3.1.2"
  },
  "devDependencies": {
    "rimraf": "~2.0.2",
    "tape": "~0.2",
    "delay-stream": "~0.0.1",
    "scuttlebutt": "~5.5",
    "macgyver": "~1.10.1",
    "level-sublevel": ">=4.6 <5",
    "level-test": "~1.4.0"
  },
  "scripts": {
    "test": "set -e; for t in test/*.js; do node $t; done"
  },
  "author": {
    "name": "'Dominic Tarr'",
    "email": "dominic.tarr@gmail.com",
    "url": "http://dominictarr.com"
  },
  "license": "MIT",
  "readme": "# level-scuttlebutt\n\nPlugin to add persistence and querying [scuttlebutt](https://github.com/scuttlebutt) documents\nstored in leveldb.\n\nInstead of representing an object as a single document, scuttlebutt represents a document as\na series of immutable transactions. The 'document' is modified by appending a new transaction.\nOld transactions that are no longer relevant can be cleaned up, but you can never modify a\ntransaction in place. As it turns out, leveldb (a log-structured merge tree) is optimized for \nexactly this sort of data.\n\nMust be used with [level-sublevel](https://github.com/dominictarr/level-sublevel)\n\n# Example\n\n``` js\nvar levelup = require(\"levelup\")\nvar level_scuttlebutt = require(\"level-scuttlebutt\")\nvar SubLevel = require('level-sublevel')\n\n\n//create a leveldb instance...\n//levelup must be extended with SubLevel!\nvar db = SubLevel(levelup(DB_FILE))\n\n\n\n//a scuttlebutt model.\nvar Model = require('scuttlebutt/model')\n\n//level-scuttlebutt needs to have an unique identifier of the current instance\nvar udid = require('udid')('app-name')\n\n\n//patch it with level-scuttlebutt.\nvar sbDb = db.sublevel('scuttlebutt') //add a scuttlebutt 'table'\n\n//k\nlevel_scuttlebutt(sbDb, udid, function (name) {\n  //create a scuttlebutt instance given a name.\n  //the key will match the start of the name.\n  return new Model()\n  //now is a good time to customize the scuttlebutt instance.\n})\n\n//open a scuttlebutt instance by name.\nsbDb.open(name, function (err, model) {\n  model.on('change:key', console.log) //...\n  model.set('key', value)\n  \n  // when you're done get rid of it\n  model.dispose()\n})\n\n//the toJSON values are stored in the db,\n//so you can just use any other map reduce library on it!\nsbDb.views['all'] =\n  mapReduce(sbDb, 'all', \n    function (key, json, emit) { \n      return emit(key.split('!'), 1)\n    },\n    function (acc, item) {\n      return '' + (Number(acc) + Number(item))\n    },\n    '0'\n  )\n\n```\n\n## Initialization\n\nAdd `level-scuttlebutt` plugin to the `db` object\n`var level_scuttlebutt = require('level-scuttlebutt'); level_scuttlebutt(db, ID, schema)`\n\n`ID` is a unique string that identifies the node (the machine) and should be \ntied to the leveldb instance.\nI suggest using [udid](https://github.com/dominictarr/udid).\n\n`schema` should be a function that takes a string (the name of the scuttlebutt instance)\nand returns and empty scuttlebutt instance.\nYou can use [scuttlebutt-schema](https://github.com/dominictarr/scuttlebutt-schema).\n\n## Queries\n\nUse some other `level-*` plugin for queries!\n\n[map-reduce](https://github.com/dominictarr/map-reduce), \n[level-map-merge](https://github.com/dominictarr/level-map-merge)\n\n### Example\n\nget the 10 last edited documents!\n\n``` js\nsbDb.views['latest10']\n  = \n  MapReduce(sdb, 'latest10',\n  function (key, json) {\n    var name = key\n    var obj = JSON.parse(json)\n    //emit 0-many group-value pairs.\n    //value must be a string or a buffer.\n    this.emit([], JSON.stringify({name: name, time: Date.now(), length: obj.text.length}))\n  },\n  //merge the latest value into the accumulator.\n  function (acc, value) {\n    var all = JSON.parse(acc).concat(JSON.parse(value))\n    //sort by time, decending.\n    all.sort(function (a, b) {\n      return b.time - a.time\n    })\n    //top ten most recent\n    var all = all.slice(0, 10)\n    return JSON.stringify(all)\n  },\n  //the first value for the accumulator.\n  //since we are parsing it, it needs to be valid JSON.\n  '[]'\n})\n```\n\n\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "description": "Plugin to add persistence and querying [scuttlebutt](https://github.com/scuttlebutt) documents stored in leveldb.",
  "bugs": {
    "url": "https://github.com/dominictarr/level-scuttlebutt/issues"
  },
  "_id": "level-scuttlebutt@5.0.6",
  "dist": {
    "shasum": "13f918e2bd176e882ed9bc70116ae4e844aefc44"
  },
  "_from": "level-scuttlebutt@",
  "_resolved": "https://registry.npmjs.org/level-scuttlebutt/-/level-scuttlebutt-5.0.6.tgz"
}
